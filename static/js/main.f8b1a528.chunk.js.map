{"version":3,"sources":["logo.svg","itemlist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Itemlist","_this","this","react_default","a","createElement","className","style","textDecorationLine","props","listData","textline","type","checked","name","onClick","checkbox","index","title","removelist","Component","App","state","formData","list","updateForm","event","newData","target","value","orignalState","copy","Object","assign","setState","addList","preventDefault","slice","push","splice","_this2","console","log","listItems","map","itemlist","moment","format","onSubmit","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gHAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uJCoBvBC,+LAfJ,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYC,MAAO,CAACC,mBAAmBN,KAAKO,MAAMC,SAASC,WACvER,EAAAC,EAAAC,cAAA,SAAOC,UAAW,aACdH,EAAAC,EAAAC,cAAA,SAAOO,KAAK,WAAWC,QAA0C,iBAAjCX,KAAKO,MAAMC,SAASC,SAA6BG,KAAK,cAAcC,QAAS,kBAAMd,EAAKQ,MAAMO,SAASf,EAAKQ,MAAMQ,UAClJd,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACfJ,KAAKO,MAAMC,SAASQ,QAG7Bf,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWS,QAAS,kBAAMd,EAAKQ,MAAMU,WAAWlB,EAAKQ,MAAMQ,SAA7E,wBAXOG,+BC2FRC,6MAvFbC,MAAO,CAELC,SAAS,CACPL,MAAM,GACNP,SAAU,IAGZa,KAAK,MAEPC,WAAa,SAACC,GAEZ,IAAMC,EAAUD,EAAME,OAAOC,MAEvBC,EAAe7B,EAAKqB,MAAMC,SAC1BQ,EAAOC,OAAOC,OAAO,GAAIH,GAI/BC,EAFYL,EAAME,OAAOd,MAEda,EAEX1B,EAAKiC,SAAS,CACZX,SAAUQ,OAIdI,QAAU,SAACT,GAETA,EAAMU,iBAEL,IAAML,EAAO9B,EAAKqB,MAAME,KAAKa,MAAM,GAEpCN,EAAKO,KAAKrC,EAAKqB,MAAMC,UAErBtB,EAAKiC,SAAS,CACTV,KAAMO,OAIbZ,WAAa,SAACF,GAEb,IAAMc,EAAO9B,EAAKqB,MAAME,KAAKa,MAAM,GAElCN,EAAKQ,OAAOtB,EAAM,GAElBhB,EAAKiC,SAAS,CACZV,KAAMO,OAGVf,SAAW,SAACC,GAEX,IAAMc,EAAO9B,EAAKqB,MAAME,KAAKa,MAAM,GAEL,iBAAzBN,EAAKd,GAAON,SACdoB,EAAKd,GAAON,SAAW,eAEvBoB,EAAKd,GAAON,SAAW,GAGzBV,EAAKiC,SAAS,CACZV,KAAMO,6EAMD,IAAAS,EAAAtC,KAEPuC,QAAQC,IAAI,SAAUxC,KAAKoB,MAAME,MACjC,IAAMmB,EAAUzC,KAAKoB,MAAME,KAAKoB,IAAI,SAAClC,EAAUO,GAC7C,OAAOd,EAAAC,EAAAC,cAACwC,EAAD,CAAU7B,SAAUwB,EAAKxB,SAAUN,SAAUA,EAAUS,WAAYqB,EAAKrB,WAAYF,MAAOA,MAGpG,OAEAd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUwC,MAASC,OAAO,4BACpC5C,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,wBAEVF,EAAAC,EAAAC,cAAA,QAAM2C,SAAU9C,KAAKiC,SACnBhC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QAAQM,KAAK,OAAOE,KAAK,QAAQmC,YAAY,0BAA0BC,SAAUhD,KAAKuB,WAAYI,MAAO3B,KAAKoB,MAAMC,SAASL,QAC9If,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASM,KAAK,UAAhC,QAGD+B,UApFSvB,aCKE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f8b1a528.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './App.css';\nimport './index.css';\n\nclass Itemlist extends Component {\n    render() {\n        return (\n            <div >         \n                <form className=\"forminput\" style={{textDecorationLine:this.props.listData.textline}}> \n                    <label className={\"container\"}>\n                        <input type='checkbox' checked={this.props.listData.textline === 'line-through'} name='checkbutton' onClick={() => this.props.checkbox(this.props.index)}></input>\n                        <span className=\"checkmark\" ></span>\n                        {this.props.listData.title}\n                    </label> \n                </form> \n                <button className=\"clearbtn\" onClick={() => this.props.removelist(this.props.index)}>✖️</button>\n            </div>\n      );}\n }\n\n  export default Itemlist;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport ItemList from './itemlist';\nimport './App.css';\nimport './index.css';\nimport moment from 'moment';\n\nclass App extends Component {\n  state ={\n    //make the form object \n    formData:{\n      title:\"\",\n      textline: \"\"\n     }, \n     //array list that takes formData\n    list:[],\n  }\n  updateForm = (event) => {\n    //user input\n    const newData = event.target.value\n    //copy form without any values so i can use it i cant take form state dirctly\n    const orignalState = this.state.formData\n    const copy = Object.assign({}, orignalState);\n    // to use title = name in the form\n    const key = event.target.name\n    //update copy with data user typed \n    copy[key]= newData\n    // update state  \n    this.setState({\n      formData: copy\n    })\n  }\n\n  addList = (event) => {\n   // to prevent button clicked refresh the page \n    event.preventDefault()\n   // make copy of the array\n     const copy = this.state.list.slice(0)\n    //add new data to the array\n    copy.push(this.state.formData)\n    // update the state with new copy of the array \n    this.setState({\n         list: copy\n         })\n  }\n  \n  removelist = (index) =>{\n   //make copy of the array\n   const copy = this.state.list.slice(0)\n    // remove one index \n    copy.splice(index,1)\n    //update state \n    this.setState({\n      list: copy\n    })\n  }\n  checkbox = (index)=> {\n   //make copy of the array\n   const copy = this.state.list.slice(0)\n    // if the index not line through make it line through otherwise empty\n    if (copy[index].textline !== \"line-through\") {\n      copy[index].textline = \"line-through\"\n    } else {\n      copy[index].textline = \"\"\n    }\n    //update state\n    this.setState({\n      list: copy\n    })\n  \n\n  }\n\n  render() {\n    //map through array and pass the index, checkbox copy\n    console.log('second', this.state.list)\n    const listItems=this.state.list.map((listData, index) => { \n      return <ItemList checkbox={this.checkbox} listData={listData} removelist={this.removelist} index={index}/>;\n     })\n    \n    return (\n    \n    <div className=\"mainform\">\n      <h2 className=\"moment\">{moment().format('MMMM Do YYYY, h:mm:ss A')}</h2>\n          <header><h1> -TODOS- </h1></header>\n         \n        <form onSubmit={this.addList}>\n          <input className=\"input\" type='text' name='title' placeholder=\"Things needs to be done\" onChange={this.updateForm} value={this.state.formData.title}></input>\n          <button className=\"btnadd\" type='submit'>Add</button>\n        </form>\n\n        {listItems} \n    </div>  );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}